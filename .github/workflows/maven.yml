name: CI/CD Pipeline to Push Docker Image

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 21 for Maven
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Step 3: Build the project using Maven
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Step 4: Authenticate Docker to GitHub Container Registry (GHCR)
      - name: Authenticate to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Step 5: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/nethmipathirana/doctor-information-ms:latest .

      # Step 6: Check if the JAR file exists in the Docker image
      - name: Check if JAR file exists in Docker image
        run: |
          # Run the container and check if the JAR file exists in the /app directory
          docker run --rm ghcr.io/nethmipathirana/doctor-information-ms:latest ls /app
          if [ "$(docker run --rm ghcr.io/nethmipathirana/doctor-information-ms:latest ls /app | grep app.jar)" == "" ]; then
            echo "ERROR: app.jar not found in the Docker image."
            exit 1
          else
            echo "app.jar found in the Docker image."
          fi

      # Step 7: Push Docker image to GHCR
      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/nethmipathirana/doctor-information-ms:latest
          echo "Pushed new Docker image."

      # Step 8: Set up Minikube (this is the CD part)
      - name: Set up Minikube
        uses: manusa/actions-minikube@v2.1.0
        with:
          minikube-version: 'latest'

      # Step 9: Apply Kubernetes Manifests to Minikube (CD deployment)
      - name: Deploy to Minikube
        run: |
          kubectl apply -f k8s/deployments.yml
