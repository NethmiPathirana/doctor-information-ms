# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: project doctor information ci-cd flow

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  security-events: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build the project with Maven
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Step 4: Debug secrets (Optional for troubleshooting)
      - name: Debug Secrets
        run: |
          echo "Docker Username: $DOCKER_USERNAME"
          echo "Docker Password Length: ${#DOCKER_PASSWORD}"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Ensure fresh Docker login
      - name: Ensure Fresh Docker Login
        run: docker logout

      # Step 6: Login to Docker Hub
      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      # Step 7: Build and Push Docker Image
      - name: Build and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          docker build -t $DOCKER_USERNAME/doctor-information-img:latest .
          docker push $DOCKER_USERNAME/doctor-information-img:latest
